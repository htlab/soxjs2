"use strict";

var _device = require("./device");

var _device2 = _interopRequireDefault(_device);

var _device_meta = require("./device_meta");

var _device_meta2 = _interopRequireDefault(_device_meta);

var _meta_transducer = require("./meta_transducer");

var _meta_transducer2 = _interopRequireDefault(_meta_transducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _xmlDeclarePatStr = "^<\\?xml[^>]+?>";
var _xmlDeclarePat = new RegExp(_xmlDeclarePatStr);

var XmlUtil = {

  removeXmlDeclaration: function removeXmlDeclaration(xmlString) {
    return xmlString.replace(_xmlDeclarePat, "");
  },

  dumpDom: function dumpDom(dom, indent) {
    if (indent === undefined) {
      indent = 0;
    }
    var tagName = dom._localName;
    var children = dom._childNodesList;
    var attrs = dom._attributes;

    var sp = "";
    for (var i = 0; i < indent; i++) {
      sp = sp + "  ";
    }

    var log = function log(msg) {
      console.log(sp + msg);
    };

    log("---tag: " + tagName);
    // log("---attributes:");
    // for (let aName of Object.keys(attrs)) {
    //   let av = attrs[aName]._valueForAttrModified;
    //   log("  - " + aName + ": " + av);
    // }
    if (children && 0 < children.length) {
      log("---children:");
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        XmlUtil.dumpDom(c, indent + 1);
      }
    }
  },

  convRecentItem: function convRecentItem(soxConnection, iq) {
    XmlUtil.dumpDom(iq);
    var fromService = iq._attributes['from']._valueForAttrModified;
    var fromDomain = fromService.substring(7);

    var pubsubTag = iq._childNodesList[0];
    var itemsTag = pubsubTag._childNodesList[0];
    var itemTag = itemsTag._childNodesList[0];
    var deviceTag = itemTag._childNodesList[0];
    var transducerTags = deviceTag._childNodesList;

    var getAttr = function getAttr(attrs, name) {
      var v = attrs[name];
      return v ? v._valueForAttrModified : v;
    };

    // device: name, id, type, serialNumber
    var deviceTagAttr = deviceTag._attributes;
    var deviceName = getAttr(deviceTagAttr, 'name');
    var deviceId = getAttr(deviceTagAttr, 'id');
    var deviceType = getAttr(deviceTagAttr, 'type');
    var deviceSerialNumber = getAttr(deviceTagAttr, 'serialNumber');

    // transducer: name, id, canActuate, hasOwnNode, units,
    //             unitScalar, minValue, maxValue, resolution
    var device = new _device2.default(soxConnection, deviceName, fromDomain);
    var transducers = [];

    for (var i = 0; i < transducerTags.length; i++) {
      var tdrTag = transducerTags[i];
      if (tdrTag._localName !== 'transducer') {
        continue;
      }
      var tdrAttrs = tdrTag._attributes;

      transducers.push(new _meta_transducer2.default(device, getAttr(tdrAttrs, 'name'), getAttr(tdrAttrs, 'id'), getAttr(tdrAttrs, 'canActuate'), getAttr(tdrAttrs, 'hasOwnNode'), getAttr(tdrAttrs, 'units'), getAttr(tdrAttrs, 'unitScalar'), getAttr(tdrAttrs, 'minValue'), getAttr(tdrAttrs, 'maxValue'), getAttr(tdrAttrs, 'resolution')));
    }

    var meta = new _device_meta2.default(device, deviceId, deviceType, deviceSerialNumber, transducers);
    return meta;
  },

  convSubscriptions: function convSubscriptions(iq) {
    var pubsubTag = iq._childNodesList[0];
    var subscriptionsTag = pubsubTag._childNodesList[0];
    var subscriptionTags = subscriptionsTag._childNodesList;

    var ret = {};
    for (var i = 0; i < subscriptionTags.length; i++) {
      var subscriptionTag = subscriptionTags[i];

      var attrs = subscriptionTag._attributes;

      var jid = attrs.jid._valueForAttrModified;
      if (ret[jid] === undefined) {
        ret[jid] = {};
      }

      var nodeName = attrs.node._valueForAttrModified;
      var subidAttr = attrs.subid;
      if (subidAttr !== undefined) {
        var subid = subidAttr._valueForAttrModified;
        if (ret[jid][nodeName] === undefined) {
          ret[jid][nodeName] = [];
        }
        ret[jid][nodeName].push(subid);
      } else {
        ret[jid][nodeName] = [];
      }
    }

    return ret;
  }

};

module.exports = XmlUtil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,