"use strict";

var _xmlDeclarePatStr = "^<\\?xml[^>]+?>";
var _xmlDeclarePat = new RegExp(_xmlDeclarePatStr);

var XmlUtil = {

  removeXmlDeclaration: function removeXmlDeclaration(xmlString) {
    return xmlString.replace(_xmlDeclarePat, "");
  },

  dumpDom: function dumpDom(dom, indent) {
    if (indent === undefined) {
      indent = 0;
    }
    var tagName = dom._localName;
    var children = dom._childNodesList;
    var attrs = dom._attributes;

    var sp = "";
    for (var i = 0; i < indent; i++) {
      sp = sp + "  ";
    }

    var log = function log(msg) {
      console.log(sp + msg);
    };

    log("---tag: " + tagName);
    // log("---attributes:");
    // for (let aName of Object.keys(attrs)) {
    //   let av = attrs[aName]._valueForAttrModified;
    //   log("  - " + aName + ": " + av);
    // }
    if (children && 0 < children.length) {
      log("---children:");
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        XmlUtil.dumpDom(c, indent + 1);
      }
    }
  },

  convSubscriptions: function convSubscriptions(iq) {
    var pubsubTag = iq._childNodesList[0];
    var subscriptionsTag = pubsubTag._childNodesList[0];
    var subscriptionTags = subscriptionsTag._childNodesList;

    var ret = {};
    for (var i = 0; i < subscriptionTags.length; i++) {
      var subscriptionTag = subscriptionTags[i];

      var attrs = subscriptionTag._attributes;

      var jid = attrs.jid._valueForAttrModified;
      if (ret[jid] === undefined) {
        ret[jid] = {};
      }

      var nodeName = attrs.node._valueForAttrModified;
      var subidAttr = attrs.subid;
      if (subidAttr !== undefined) {
        var subid = subidAttr._valueForAttrModified;
        if (ret[jid][nodeName] === undefined) {
          ret[jid][nodeName] = [];
        }
        ret[jid][nodeName].push(subid);
      } else {
        ret[jid][nodeName] = [];
      }
    }

    return ret;
  }

};

module.exports = XmlUtil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy94bWxfdXRpbC5qcyJdLCJuYW1lcyI6WyJfeG1sRGVjbGFyZVBhdFN0ciIsIl94bWxEZWNsYXJlUGF0IiwiUmVnRXhwIiwiWG1sVXRpbCIsInJlbW92ZVhtbERlY2xhcmF0aW9uIiwieG1sU3RyaW5nIiwicmVwbGFjZSIsImR1bXBEb20iLCJkb20iLCJpbmRlbnQiLCJ1bmRlZmluZWQiLCJ0YWdOYW1lIiwiX2xvY2FsTmFtZSIsImNoaWxkcmVuIiwiX2NoaWxkTm9kZXNMaXN0IiwiYXR0cnMiLCJfYXR0cmlidXRlcyIsInNwIiwiaSIsImxvZyIsIm1zZyIsImNvbnNvbGUiLCJsZW5ndGgiLCJjIiwiY29udlN1YnNjcmlwdGlvbnMiLCJpcSIsInB1YnN1YlRhZyIsInN1YnNjcmlwdGlvbnNUYWciLCJzdWJzY3JpcHRpb25UYWdzIiwicmV0Iiwic3Vic2NyaXB0aW9uVGFnIiwiamlkIiwiX3ZhbHVlRm9yQXR0ck1vZGlmaWVkIiwibm9kZU5hbWUiLCJub2RlIiwic3ViaWRBdHRyIiwic3ViaWQiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJQSxvQkFBb0IsaUJBQXhCO0FBQ0EsSUFBSUMsaUJBQWlCLElBQUlDLE1BQUosQ0FBV0YsaUJBQVgsQ0FBckI7O0FBRUEsSUFBSUcsVUFBVTs7QUFFWkMsd0JBQXNCLDhCQUFDQyxTQUFELEVBQWU7QUFDbkMsV0FBT0EsVUFBVUMsT0FBVixDQUFrQkwsY0FBbEIsRUFBa0MsRUFBbEMsQ0FBUDtBQUNELEdBSlc7O0FBTVpNLFdBQVMsaUJBQUNDLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUN4QixRQUFJQSxXQUFXQyxTQUFmLEVBQTBCO0FBQ3hCRCxlQUFTLENBQVQ7QUFDRDtBQUNELFFBQUlFLFVBQVVILElBQUlJLFVBQWxCO0FBQ0EsUUFBSUMsV0FBV0wsSUFBSU0sZUFBbkI7QUFDQSxRQUFJQyxRQUFRUCxJQUFJUSxXQUFoQjs7QUFFQSxRQUFJQyxLQUFLLEVBQVQ7QUFDQSxTQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSVQsTUFBcEIsRUFBNEJTLEdBQTVCLEVBQWlDO0FBQy9CRCxXQUFLQSxLQUFLLElBQVY7QUFDRDs7QUFFRCxRQUFJRSxNQUFNLFNBQU5BLEdBQU0sQ0FBQ0MsR0FBRCxFQUFTO0FBQ2pCQyxjQUFRRixHQUFSLENBQVlGLEtBQUtHLEdBQWpCO0FBQ0QsS0FGRDs7QUFJQUQsUUFBSSxhQUFhUixPQUFqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJRSxZQUFZLElBQUlBLFNBQVNTLE1BQTdCLEVBQXFDO0FBQ25DSCxVQUFJLGNBQUo7QUFDQSxXQUFLLElBQUlELElBQUksQ0FBYixFQUFnQkEsSUFBSUwsU0FBU1MsTUFBN0IsRUFBcUNKLEdBQXJDLEVBQTBDO0FBQ3hDLFlBQUlLLElBQUlWLFNBQVNLLENBQVQsQ0FBUjtBQUNBZixnQkFBUUksT0FBUixDQUFnQmdCLENBQWhCLEVBQW1CZCxTQUFTLENBQTVCO0FBQ0Q7QUFDRjtBQUNGLEdBcENXOztBQXNDWmUscUJBQW1CLDJCQUFDQyxFQUFELEVBQVE7QUFDekIsUUFBSUMsWUFBWUQsR0FBR1gsZUFBSCxDQUFtQixDQUFuQixDQUFoQjtBQUNBLFFBQUlhLG1CQUFtQkQsVUFBVVosZUFBVixDQUEwQixDQUExQixDQUF2QjtBQUNBLFFBQUljLG1CQUFtQkQsaUJBQWlCYixlQUF4Qzs7QUFFQSxRQUFJZSxNQUFNLEVBQVY7QUFDQSxTQUFLLElBQUlYLElBQUksQ0FBYixFQUFnQkEsSUFBSVUsaUJBQWlCTixNQUFyQyxFQUE2Q0osR0FBN0MsRUFBa0Q7QUFDaEQsVUFBSVksa0JBQWtCRixpQkFBaUJWLENBQWpCLENBQXRCOztBQUVBLFVBQUlILFFBQVFlLGdCQUFnQmQsV0FBNUI7O0FBRUEsVUFBSWUsTUFBTWhCLE1BQU1nQixHQUFOLENBQVVDLHFCQUFwQjtBQUNBLFVBQUlILElBQUlFLEdBQUosTUFBYXJCLFNBQWpCLEVBQTRCO0FBQzFCbUIsWUFBSUUsR0FBSixJQUFXLEVBQVg7QUFDRDs7QUFFRCxVQUFJRSxXQUFXbEIsTUFBTW1CLElBQU4sQ0FBV0YscUJBQTFCO0FBQ0EsVUFBSUcsWUFBWXBCLE1BQU1xQixLQUF0QjtBQUNBLFVBQUlELGNBQWN6QixTQUFsQixFQUE2QjtBQUMzQixZQUFJMEIsUUFBUUQsVUFBVUgscUJBQXRCO0FBQ0EsWUFBSUgsSUFBSUUsR0FBSixFQUFTRSxRQUFULE1BQXVCdkIsU0FBM0IsRUFBc0M7QUFDcENtQixjQUFJRSxHQUFKLEVBQVNFLFFBQVQsSUFBcUIsRUFBckI7QUFDRDtBQUNESixZQUFJRSxHQUFKLEVBQVNFLFFBQVQsRUFBbUJJLElBQW5CLENBQXdCRCxLQUF4QjtBQUNELE9BTkQsTUFNTztBQUNMUCxZQUFJRSxHQUFKLEVBQVNFLFFBQVQsSUFBcUIsRUFBckI7QUFDRDtBQUNGOztBQUVELFdBQU9KLEdBQVA7QUFDRDs7QUFwRVcsQ0FBZDs7QUF3RUFTLE9BQU9DLE9BQVAsR0FBaUJwQyxPQUFqQiIsImZpbGUiOiJ4bWxfdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIF94bWxEZWNsYXJlUGF0U3RyID0gXCJePFxcXFw/eG1sW14+XSs/PlwiO1xudmFyIF94bWxEZWNsYXJlUGF0ID0gbmV3IFJlZ0V4cChfeG1sRGVjbGFyZVBhdFN0cik7XG5cbmxldCBYbWxVdGlsID0ge1xuXG4gIHJlbW92ZVhtbERlY2xhcmF0aW9uOiAoeG1sU3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHhtbFN0cmluZy5yZXBsYWNlKF94bWxEZWNsYXJlUGF0LCBcIlwiKTtcbiAgfSxcblxuICBkdW1wRG9tOiAoZG9tLCBpbmRlbnQpID0+IHtcbiAgICBpZiAoaW5kZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGluZGVudCA9IDA7XG4gICAgfVxuICAgIGxldCB0YWdOYW1lID0gZG9tLl9sb2NhbE5hbWU7XG4gICAgbGV0IGNoaWxkcmVuID0gZG9tLl9jaGlsZE5vZGVzTGlzdDtcbiAgICBsZXQgYXR0cnMgPSBkb20uX2F0dHJpYnV0ZXM7XG5cbiAgICB2YXIgc3AgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kZW50OyBpKyspIHtcbiAgICAgIHNwID0gc3AgKyBcIiAgXCI7XG4gICAgfVxuXG4gICAgbGV0IGxvZyA9IChtc2cpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHNwICsgbXNnKTtcbiAgICB9O1xuXG4gICAgbG9nKFwiLS0tdGFnOiBcIiArIHRhZ05hbWUpO1xuICAgIC8vIGxvZyhcIi0tLWF0dHJpYnV0ZXM6XCIpO1xuICAgIC8vIGZvciAobGV0IGFOYW1lIG9mIE9iamVjdC5rZXlzKGF0dHJzKSkge1xuICAgIC8vICAgbGV0IGF2ID0gYXR0cnNbYU5hbWVdLl92YWx1ZUZvckF0dHJNb2RpZmllZDtcbiAgICAvLyAgIGxvZyhcIiAgLSBcIiArIGFOYW1lICsgXCI6IFwiICsgYXYpO1xuICAgIC8vIH1cbiAgICBpZiAoY2hpbGRyZW4gJiYgMCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgbG9nKFwiLS0tY2hpbGRyZW46XCIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBYbWxVdGlsLmR1bXBEb20oYywgaW5kZW50ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbnZTdWJzY3JpcHRpb25zOiAoaXEpID0+IHtcbiAgICBsZXQgcHVic3ViVGFnID0gaXEuX2NoaWxkTm9kZXNMaXN0WzBdO1xuICAgIGxldCBzdWJzY3JpcHRpb25zVGFnID0gcHVic3ViVGFnLl9jaGlsZE5vZGVzTGlzdFswXTtcbiAgICBsZXQgc3Vic2NyaXB0aW9uVGFncyA9IHN1YnNjcmlwdGlvbnNUYWcuX2NoaWxkTm9kZXNMaXN0O1xuXG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaXB0aW9uVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHN1YnNjcmlwdGlvblRhZyA9IHN1YnNjcmlwdGlvblRhZ3NbaV07XG5cbiAgICAgIGxldCBhdHRycyA9IHN1YnNjcmlwdGlvblRhZy5fYXR0cmlidXRlcztcblxuICAgICAgbGV0IGppZCA9IGF0dHJzLmppZC5fdmFsdWVGb3JBdHRyTW9kaWZpZWQ7XG4gICAgICBpZiAocmV0W2ppZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXRbamlkXSA9IHt9O1xuICAgICAgfVxuXG4gICAgICBsZXQgbm9kZU5hbWUgPSBhdHRycy5ub2RlLl92YWx1ZUZvckF0dHJNb2RpZmllZDtcbiAgICAgIGxldCBzdWJpZEF0dHIgPSBhdHRycy5zdWJpZDtcbiAgICAgIGlmIChzdWJpZEF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgc3ViaWQgPSBzdWJpZEF0dHIuX3ZhbHVlRm9yQXR0ck1vZGlmaWVkO1xuICAgICAgICBpZiAocmV0W2ppZF1bbm9kZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXRbamlkXVtub2RlTmFtZV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXRbamlkXVtub2RlTmFtZV0ucHVzaChzdWJpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXRbamlkXVtub2RlTmFtZV0gPSBbXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gWG1sVXRpbDtcbiJdfQ==